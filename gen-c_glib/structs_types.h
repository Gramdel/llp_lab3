/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef STRUCTS_TYPES_H
#define STRUCTS_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _nodeType_t {
  NODE_TYPE_T_SELECT_QUERY_NODE = 0,
  NODE_TYPE_T_INSERT_QUERY_NODE = 1,
  NODE_TYPE_T_UPDATE_QUERY_NODE = 2,
  NODE_TYPE_T_DELETE_QUERY_NODE = 3,
  NODE_TYPE_T_NESTED_QUERY_NODE = 4,
  NODE_TYPE_T_QUERY_SET_NODE = 5,
  NODE_TYPE_T_OBJECT_NODE = 6,
  NODE_TYPE_T_VALUES_NODE = 7,
  NODE_TYPE_T_ELEMENT_SET_NODE = 8,
  NODE_TYPE_T_ELEMENT_NODE = 9,
  NODE_TYPE_T_KEY_NODE = 10,
  NODE_TYPE_T_FOREIGN_KEY_NODE = 11,
  NODE_TYPE_T_INT_VAL_NODE = 12,
  NODE_TYPE_T_DOUBLE_VAL_NODE = 13,
  NODE_TYPE_T_BOOL_VAL_NODE = 14,
  NODE_TYPE_T_STR_VAL_NODE = 15,
  NODE_TYPE_T_FILTER_NODE = 16,
  NODE_TYPE_T_JOIN_NODE = 17,
  NODE_TYPE_T_OP_EQ_NODE = 18,
  NODE_TYPE_T_OP_NEQ_NODE = 19,
  NODE_TYPE_T_OP_GT_NODE = 20,
  NODE_TYPE_T_OP_GTE_NODE = 21,
  NODE_TYPE_T_OP_LE_NODE = 22,
  NODE_TYPE_T_OP_LEE_NODE = 23,
  NODE_TYPE_T_OP_LIKE_NODE = 24,
  NODE_TYPE_T_OP_AND_NODE = 25,
  NODE_TYPE_T_OP_OR_NODE = 26,
  NODE_TYPE_T_OP_NOT_NODE = 27
};
typedef enum _nodeType_t nodeType_t;

/* return the name of the constant */
const char *
toString_nodeType_t(int value); 

/* struct value_t */
struct _value_t
{ 
  ThriftStruct parent; 

  /* public */
  gint32 intVal;
  gboolean __isset_intVal;
  gdouble doubleVal;
  gboolean __isset_doubleVal;
  gboolean boolVal;
  gboolean __isset_boolVal;
  gchar * strVal;
  gboolean __isset_strVal;
};
typedef struct _value_t value_t;

struct _value_tClass
{
  ThriftStructClass parent;
};
typedef struct _value_tClass value_tClass;

GType value_t_get_type (void);
#define TYPE_VALUE_T (value_t_get_type())
#define VALUE_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VALUE_T, value_t))
#define VALUE_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VALUE_T, value_tClass))
#define IS_VALUE_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VALUE_T))
#define IS_VALUE_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VALUE_T))
#define VALUE_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VALUE_T, value_tClass))

/* struct astNode_t */
struct _astNode_t
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * left;
  gboolean __isset_left;
  GPtrArray * right;
  gboolean __isset_right;
  nodeType_t type;
  gboolean __isset_type;
  value_t * val;
  gboolean __isset_val;
};
typedef struct _astNode_t astNode_t;

struct _astNode_tClass
{
  ThriftStructClass parent;
};
typedef struct _astNode_tClass astNode_tClass;

GType ast_node_t_get_type (void);
#define TYPE_AST_NODE_T (ast_node_t_get_type())
#define AST_NODE_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AST_NODE_T, astNode_t))
#define AST_NODE_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_AST_NODE_T, astNode_tClass))
#define IS_AST_NODE_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AST_NODE_T))
#define IS_AST_NODE_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AST_NODE_T))
#define AST_NODE_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AST_NODE_T, astNode_tClass))

/* constants */

/* struct ZgdbServiceExecuteArgs */
struct _ZgdbServiceExecuteArgs
{ 
  ThriftStruct parent; 

  /* public */
  astNode_t * tree;
  gboolean __isset_tree;
};
typedef struct _ZgdbServiceExecuteArgs ZgdbServiceExecuteArgs;

struct _ZgdbServiceExecuteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _ZgdbServiceExecuteArgsClass ZgdbServiceExecuteArgsClass;

GType zgdb_service_execute_args_get_type (void);
#define TYPE_ZGDB_SERVICE_EXECUTE_ARGS (zgdb_service_execute_args_get_type())
#define ZGDB_SERVICE_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_EXECUTE_ARGS, ZgdbServiceExecuteArgs))
#define ZGDB_SERVICE_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ZGDB_SERVICE_EXECUTE_ARGS, ZgdbServiceExecuteArgsClass))
#define IS_ZGDB_SERVICE_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_EXECUTE_ARGS))
#define IS_ZGDB_SERVICE_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ZGDB_SERVICE_EXECUTE_ARGS))
#define ZGDB_SERVICE_EXECUTE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ZGDB_SERVICE_EXECUTE_ARGS, ZgdbServiceExecuteArgsClass))

/* struct ZgdbServiceExecuteResult */
struct _ZgdbServiceExecuteResult
{ 
  ThriftStruct parent; 

  /* public */
  gchar * success;
  gboolean __isset_success;
};
typedef struct _ZgdbServiceExecuteResult ZgdbServiceExecuteResult;

struct _ZgdbServiceExecuteResultClass
{
  ThriftStructClass parent;
};
typedef struct _ZgdbServiceExecuteResultClass ZgdbServiceExecuteResultClass;

GType zgdb_service_execute_result_get_type (void);
#define TYPE_ZGDB_SERVICE_EXECUTE_RESULT (zgdb_service_execute_result_get_type())
#define ZGDB_SERVICE_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_EXECUTE_RESULT, ZgdbServiceExecuteResult))
#define ZGDB_SERVICE_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ZGDB_SERVICE_EXECUTE_RESULT, ZgdbServiceExecuteResultClass))
#define IS_ZGDB_SERVICE_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_EXECUTE_RESULT))
#define IS_ZGDB_SERVICE_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ZGDB_SERVICE_EXECUTE_RESULT))
#define ZGDB_SERVICE_EXECUTE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ZGDB_SERVICE_EXECUTE_RESULT, ZgdbServiceExecuteResultClass))

#endif /* STRUCTS_TYPES_H */
