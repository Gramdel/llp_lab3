/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ZGDB_SERVICE_H
#define ZGDB_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "structs_types.h"

/* ZgdbService service interface */
typedef struct _ZgdbServiceIf ZgdbServiceIf;  /* dummy object */

struct _ZgdbServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*execute) (ZgdbServiceIf *iface, gchar ** _return, const astNode_t * tree, GError **error);
};
typedef struct _ZgdbServiceIfInterface ZgdbServiceIfInterface;

GType zgdb_service_if_get_type (void);
#define TYPE_ZGDB_SERVICE_IF (zgdb_service_if_get_type())
#define ZGDB_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_IF, ZgdbServiceIf))
#define IS_ZGDB_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_IF))
#define ZGDB_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_ZGDB_SERVICE_IF, ZgdbServiceIfInterface))

gboolean zgdb_service_if_execute (ZgdbServiceIf *iface, gchar ** _return, const astNode_t * tree, GError **error);

/* ZgdbService service client */
struct _ZgdbServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _ZgdbServiceClient ZgdbServiceClient;

struct _ZgdbServiceClientClass
{
  GObjectClass parent;
};
typedef struct _ZgdbServiceClientClass ZgdbServiceClientClass;

GType zgdb_service_client_get_type (void);
#define TYPE_ZGDB_SERVICE_CLIENT (zgdb_service_client_get_type())
#define ZGDB_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_CLIENT, ZgdbServiceClient))
#define ZGDB_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_ZGDB_SERVICE_CLIENT, ZgdbServiceClientClass))
#define ZGDB_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_CLIENT))
#define ZGDB_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ZGDB_SERVICE_CLIENT))
#define ZGDB_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ZGDB_SERVICE_CLIENT, ZgdbServiceClientClass))

gboolean zgdb_service_client_execute (ZgdbServiceIf * iface, gchar ** _return, const astNode_t * tree, GError ** error);
gboolean zgdb_service_client_send_execute (ZgdbServiceIf * iface, const astNode_t * tree, GError ** error);
gboolean zgdb_service_client_recv_execute (ZgdbServiceIf * iface, gchar ** _return, GError ** error);
void zgdb_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void zgdb_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ZgdbService handler (abstract base class) */
struct _ZgdbServiceHandler
{
  GObject parent;
};
typedef struct _ZgdbServiceHandler ZgdbServiceHandler;

struct _ZgdbServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*execute) (ZgdbServiceIf *iface, gchar ** _return, const astNode_t * tree, GError **error);
};
typedef struct _ZgdbServiceHandlerClass ZgdbServiceHandlerClass;

GType zgdb_service_handler_get_type (void);
#define TYPE_ZGDB_SERVICE_HANDLER (zgdb_service_handler_get_type())
#define ZGDB_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_HANDLER, ZgdbServiceHandler))
#define IS_ZGDB_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_HANDLER))
#define ZGDB_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_ZGDB_SERVICE_HANDLER, ZgdbServiceHandlerClass))
#define IS_ZGDB_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ZGDB_SERVICE_HANDLER))
#define ZGDB_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ZGDB_SERVICE_HANDLER, ZgdbServiceHandlerClass))

gboolean zgdb_service_handler_execute (ZgdbServiceIf *iface, gchar ** _return, const astNode_t * tree, GError **error);

/* ZgdbService processor */
struct _ZgdbServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  ZgdbServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _ZgdbServiceProcessor ZgdbServiceProcessor;

struct _ZgdbServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _ZgdbServiceProcessorClass ZgdbServiceProcessorClass;

GType zgdb_service_processor_get_type (void);
#define TYPE_ZGDB_SERVICE_PROCESSOR (zgdb_service_processor_get_type())
#define ZGDB_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ZGDB_SERVICE_PROCESSOR, ZgdbServiceProcessor))
#define IS_ZGDB_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ZGDB_SERVICE_PROCESSOR))
#define ZGDB_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_ZGDB_SERVICE_PROCESSOR, ZgdbServiceProcessorClass))
#define IS_ZGDB_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ZGDB_SERVICE_PROCESSOR))
#define ZGDB_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ZGDB_SERVICE_PROCESSOR, ZgdbServiceProcessorClass))

#endif /* ZGDB_SERVICE_H */
